// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id                Int                @id @default(autoincrement())
  email             String             @unique
  changedEmail      Boolean            @default(false)
  displayName       String
  password          String
  avatar            String?
  setting           UserSetting?
  partyRoom         PartyRoom?
  partyParticipants PartyParticipants?
}

model UserSetting {
  id              Int     @id @default(autoincrement())
  user            User    @relation(fields: [userId], references: [id])
  userId          Int     @unique
  animationEnable Boolean @default(true)
  ecoMode         Boolean @default(false)
}

model PartyRoom {
  id                Int                 @id @default(autoincrement())
  partyId           String              @unique
  user              User                @relation(fields: [ownerId], references: [id])
  ownerId           Int                 @unique
  partyParticipants PartyParticipants[]
  partyPlaylist     PartyPlaylist[]
}

model PartyParticipants {
  id            Int       @id @default(autoincrement())
  partyRoom     PartyRoom @relation(fields: [partyId], references: [partyId])
  partyId       String
  user          User      @relation(fields: [participantId], references: [id])
  participantId Int       @unique
}

model PartyPlaylist {
  id        Int       @id @default(autoincrement())
  partyRoom PartyRoom @relation(fields: [partyId], references: [partyId])
  partyId   String
  video     Json
}
